There will be two arrays of integers. Determine all integers that satisfy the following two conditions:
The elements of the first array are all factors of the integer being considered
The integer being considered is a factor of all elements of the second array

These numbers are referred to as being between the two arrays. Determine how many such numbers exist.


Solution:

#!/bin/python3

import math
import os
import random
import re
import sys


#
# Complete the 'getTotalX' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER_ARRAY a
#  2. INTEGER_ARRAY b
#
import math

def LCMofArray(a):
    lcm = a[0]
    for i in range(1,len(a)):
      lcm = lcm*a[i]//math.gcd(lcm, a[i])
    return lcm
    
def GCDofAttay(a):
      gcd = a[0]
      for i in range(1,len(a)):
           gcd = math.gcd(gcd, a[i])
      return gcd
  
      
def getTotalX(a, b):
    # Write your code here
    start = LCMofArray(a);
    end = GCDofAttay(b);

    li = []
    for no in range(start,end+1):
        flag=True;
        for i in b:
            if i%no!=0:
                flag=False;
                break;
        if flag:
            li.append(no)      
    return len(li)
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    brr = list(map(int, input().rstrip().split()))

    total = getTotalX(arr, brr)

    fptr.write(str(total) + '\n')

    fptr.close()
