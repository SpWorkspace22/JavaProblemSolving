Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.

Solution:

class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        //code here
        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];
          
         
        for (int i = 0; i < V; i++){
            if (isCyclicUtil(i, visited, recStack,adj)){
                return true;
            }
        }
  
        return false;
    }
    
    private boolean isCyclicUtil(int i, boolean visited[], boolean recStack[], 
        ArrayList<ArrayList<Integer>> adj){
        if(recStack[i]){
            return true;
        }
    
        if(visited[i]){
            return false;
        }
        
        visited[i]  =  true;
        recStack[i] = true;
        
        List<Integer> li = adj.get(i);
        for(Integer c: li){
            if (isCyclicUtil(c, visited, recStack,adj)){
                return true;
            }
        }
        recStack[i] = false;
        return false;
        
    }
}
