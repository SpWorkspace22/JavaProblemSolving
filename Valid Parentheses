Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true

Solution:

class Solution {
    public boolean isValid(String s) {
        Stack<Character> st = new Stack<Character>();
        boolean flag = false;
        
        if(s.length()==1){
            return false;
        }
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(' || s.charAt(i)=='{' || s.charAt(i)=='['){
                st.push(s.charAt(i));
            }
            
            if(s.charAt(i)==')' || s.charAt(i)=='}' || s.charAt(i)==']'){
                if(st.empty()){
                    return false;
                }
                flag = isValid(s.charAt(i), st.pop());
                
                if(!flag){
                    return flag;
                }
            }
        }
        
        if(!st.empty()){
            return false;
        }
        return flag;
        
    }
    
    public boolean isValid(char current, char fromStack){
        if (current==')' && fromStack=='(' )
        {
            return true;
        }
        if (current=='}' && fromStack=='{')
        {
            return true;
        }
        if (current==']' && fromStack=='[')
        {
            return true;
        }
        
        return false;
    }
}
