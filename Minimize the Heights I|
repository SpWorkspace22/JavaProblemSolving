Given an array arr[] denoting heights of N towers and a positive integer K.

For each tower, you must perform exactly one of the following operations exactly once.

Increase the height of the tower by K
Decrease the height of the tower by K
Find out the minimum possible difference between the height of the shortest and tallest towers after you have modified each tower.

You can find a slight modification of the problem here.
Note: It is compulsory to increase or decrease the height by K for each tower. After the operation, the resultant array should not contain any negative integers.

////
The idea is to increase the first i towers by k and decrease the rest tower by k after sorting the heights, then calculate the maximum height difference.
This can be achieved using sorting.
////

Solution:

class Solution {
    int getMinDiff(int[] arr, int n, int k) {
        // code here
        Arrays.sort(arr);
        int mini, maxi;
        int result = arr[n-1]-arr[0];
        
        for(int i=1;i<n;i++){
            maxi=Math.max(arr[i-1]+k,arr[n-1]-k);
            mini=Math.min(arr[i]-k,arr[0]+k);
            
            if(mini<0){
                continue;
            }
            result = Math.min(result,maxi-mini);
        }
        
        return result;
    }
}
