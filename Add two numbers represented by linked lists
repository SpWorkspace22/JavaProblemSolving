Given two decimal numbers represented by two linked lists of size N and M respectively. The task is to return a linked list that represents the sum of these two numbers.

For example, the number 190 will be represented by the linked list, 1->9->0->null, similarly 25 by 2->5->null. Sum of these two numbers is 190 + 25 = 215, which will be represented by 2->1->5->null. You are required to return the head of the linked list 2->1->5->null.

Solution:

class Solution{
    //Function to add two numbers represented by linked list.
    static Node addTwoLists(Node first, Node second){
        // code here
        // return head of sum list
        first = reverse(first);
        second = reverse(second);
        int carry = 0, sum = 0;
        Node temp = null;
        Node curr = null;
        Node res = null;
        
        while(second != null || first != null){
            
            sum = carry + ((first != null)?first.data : 0) + ((second != null)?second.data : 0);
                
            carry = (sum > 9)? 1 : 0;
            sum = (sum > 9)? sum%10: sum;
                
            temp = new Node(sum);
             
            if(res == null){
                res = temp;
            }
            else{
                curr.next = temp;
            }
            curr = temp;
            
            
            if(first != null){
                first = first.next;
            }
            if(second != null){
                second = second.next;
            }
            
        }
        
        if(carry > 0){
            temp = new Node(carry);
            curr.next = temp;
            curr = temp;
        }
        res = reverse(res);
        
        return res;
    }
    
    static Node reverse(Node head){
        Node prev = null;
        Node curr = head;
        
        while(curr != null){
            Node temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    } 
}
