A left rotation operation on an array of size  shifts each of the array's elements  unit to the left. Given an integer, , rotate the array that many steps left and return the result.

Example


After  rotations, .

Function Description

Complete the rotateLeft function in the editor below.

rotateLeft has the following parameters:

int d: the amount to rotate by
int arr[n]: the array to rotate
Returns

int[n]: the rotated array
Input Format

The first line contains two space-separated integers that denote , the number of integers, and , the number of left rotations to perform.
The second line contains  space-separated integers that describe .

Constraints

Sample Input

5 4
1 2 3 4 5
Sample Output

5 1 2 3 4


Solution:


class Result {

    /*
     * Complete the 'rotateLeft' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER d
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> rotateLeft(int d, List<Integer> arr) {
    // Write your code here
        int n = arr.size();
        d = d % n;
        int i, j, k, temp;
        int g_c_d = gcd(d, n);
        for (i = 0; i < g_c_d; i++) {
            /* move i-th values of blocks */
            temp = arr.get(i);
            j = i;
            while (true) {
                k = j + d;
                if (k >= n){
                    k = k - n;                    
                }
                if (k == i){
                    break;
                }
                arr.set(j,arr.get(k));
                j = k;
            }
            arr.set(j,temp);
        }
        return arr;
    }

    static int gcd(int a, int b)
    {
        if (b == 0)
            return a;
        else
            return gcd(b, a % b);
    }
}


Solution 2:

timeO (n)
space O(n)

class Result {

    /*
     * Complete the 'rotateLeft' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER d
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> rotateLeft(int d, List<Integer> arr) {
    // Write your code here
        ArrayList<Integer> asList = new ArrayList<Integer>();
 
        // Storing the n - d elements of
        // array arr[] to the front of temp[]
        for (int i = d; i < arr.size(); i++) {
            asList.add(arr.get(i));
        }
    
        // Storing the first d elements of array arr[]
        //  into temp
        for (int i = 0; i < d; i++) {
            asList.add(arr.get(i));
        }
    
        return asList;
    }
}


