import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'caesarCipher' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER k
     */

    public static String caesarCipher(String orginal, int k) {
    // Write your code here
        StringBuffer bf = new StringBuffer();

        if (k > 26) {
            k = k % 26;
        }
        for (int i = 0; i < orginal.length(); i++) {
            char c = orginal.charAt(i);
            if (Character.isAlphabetic(c)) {
                if (Character.isUpperCase(c)) {
                    c = nextCharacter(65, 90, c, k);
                    bf.append(c);
                } else {
                    c = nextCharacter(97, 122, c, k);
                    bf.append(c);
                }
            } else {
                bf.append(c);
            }
        }

        return bf.toString();
    }
    
    private static Character nextCharacter(int low, int high, char c, int k) {
        int ascii = (int) c;
        ascii += k;

        if (ascii > high) {
            ascii = low + (ascii - high) - 1;
        }
        return (char) ascii;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String s = bufferedReader.readLine();

        int k = Integer.parseInt(bufferedReader.readLine().trim());

        String result = Result.caesarCipher(s, k);

        bufferedWriter.write(result);
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
