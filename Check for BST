Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Solution:


public class Solution
{
    //Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node node)
    {
        // code here.
        if (node == null)
            return true;
     
        /* False if left is > than node */
        if (node.left != null && node.left.data > node.data)
            return false;
     
        /* False if right is < than node */
        if (node.right != null && node.right.data < node.data)
            return false;
     
        /* False if, recursively, the left or right is not a BST
         */
        if (!isBST(node.left) || !isBST(node.right))
            return false;
     
        /* Passing all that, it's a BST */
        return true;
    }
}
