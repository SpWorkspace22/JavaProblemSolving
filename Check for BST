Given the root of a binary tree. Check whether it is a BST or not.
Note: We are considering that BSTs can not contain duplicate Nodes.
A BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Solution:


public class Solution
{
    //Function to check whether a Binary Tree is BST or not.
    boolean isBST(Node node)
    {
        // code here.
        return isBSTUtil(node, Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
    
    boolean isBSTUtil(Node node, int min, int max){
        if(node==null){
            return true;
        }
        
        if(node.data <min || node.data > max){
            return false;
        }
        
        return (isBSTUtil(node.left, min, node.data - 1) && isBSTUtil(node.right, node.data + 1, max));
    }
}
