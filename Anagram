Question: Return Mininum Number of character to change so that two strings are anagarm of each other.




idea to solve:
MAX Character String will have 256 (If All Unique)
count the frequency and check , if frequency is not equal , find the absolute difference and add it to previoues result
return sum / 2 (We are dividing one string to two parts of same length);


Solution:

import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



class Result {

    /*
     * Complete the 'anagram' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts STRING s as parameter.
     */
    
    private static int MAX_CHARS =256;
    public static int anagram(String s) {
    // Write your code here
        if(s.length()%2==0){
            int seperate = s.length() / 2;

            char[] firstPart = s.substring(0, seperate).toCharArray();
            char[] secondPart = s.substring(seperate, s.length()).toCharArray();
            
            return minCount(firstPart, secondPart);  
        }
        return -1;

    }
    
        private static int minCount(char[] firstPart, char[] secondPart) {
        int count1[] = new int[MAX_CHARS];
        Arrays.fill(count1, 0);
        int count2[] = new int[MAX_CHARS];
        Arrays.fill(count2, 0);

        for (int i = 0; i < firstPart.length && i < secondPart.length; i++) {
            count1[firstPart[i]]++;
            count2[secondPart[i]]++;
        }

        int sum = 0;
        for (int i = 0; i < MAX_CHARS; i++) {
            if (count1[i] != count2[i]) {
                sum += Math.abs(count1[i] - count2[i]);
            }
        }

        return sum / 2;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s = bufferedReader.readLine();

                int result = Result.anagram(s);

                bufferedWriter.write(String.valueOf(result));
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
