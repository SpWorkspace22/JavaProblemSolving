Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

Solution:
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
    
        if(head.next==null){
            return head;
        }
        
        if(head.next.next==null){
            return head.next;
        }
        
        ListNode p = head;
        ListNode q = head.next.next;
        
        while(p!=null && q.next!=null){
            if(q.next.next==null){
                q=q.next;
            }else{
                q=q.next.next;
            }
            p=p.next;
        }
        
        return p.next;
    }
}
